service: aws-python-api-worker-project

frameworkVersion: '2'

package:
  patterns:
    - '!**'
    - 'handler.py'
    - 'collector.yaml'
    - 'requirements.txt'
    - otel_init.py

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: '20201221'
  stage: dev
  region: ${file(env.json):aws-region}
  tracing:
    apiGateway: false
    lambda: PassThrough
  environment:
    OPENTELEMETRY_COLLECTOR_CONFIG_FILE: "/var/task/collector.yaml"
    APM_SERVER_URL: ${file(env.json):apm-server-url}
    APM_SERVER_TOKEN: ${file(env.json):apm-server-token}
    OTEL_PROPAGATORS: "tracecontext"

    # Turn on sampling, if not sent from the caller. This can potentially create a very large amount of data.
    OTEL_TRACES_SAMPLER: "Always_On"

    # Disable requests autoinstrumentation to perform all manual otel instrumentation
    OTEL_PYTHON_DISABLED_INSTRUMENTATIONS: "requests"

functions:
  producer:
    handler: handler.producer
    layers:
      - arn:aws:lambda:${aws:region}:901920570463:layer:aws-otel-python38-ver-1-5-0:2
    environment:
      CONSUMER_API: https://#{ApiGatewayRestApi}.execute-api.${aws:region}.amazonaws.com/${self:provider.stage}/consume         
      OTEL_SERVICE_NAME: ${self:functions.producer.handler}
    events:
      - http:
          method: post
          path: produce

  consumer:
    handler: handler.consumer    
    layers:
      - arn:aws:lambda:${aws:region}:901920570463:layer:aws-otel-python38-ver-1-5-0:2    
    environment:
      OTEL_SERVICE_NAME: ${self:functions.consumer.handler}
    events:
      - http:
          method: get
          path: consume

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters